#BlueJ class context
comment0.target=Ex14
comment0.text=\r\n\ Ex14\ -\ implements\ all\ the\ answer\ for\ mmn\ 14\ \r\n\ @Author\ \:\ Roey\ Shtern\r\n\ @Version\ \:\ 20/6/2020\r\n
comment1.params=arr
comment1.target=void\ win(int[])
comment1.text=\r\n\ Prints\ the\ path\ of\ the\ game\ according\ to\ tamar\ and\ amir\ choices\r\n\ Time\ complexity\ \=\ O(isOddBigger())\ +\ O(PrintPath)\ \=\ O(n)\ +\ O(n)\ \=\ O(2n)\ \=\ O(n)\r\n\ Space\ complexity\ \=\ O(isOddBigger())\ +\ O(PrintPath)\ \=\ O(1)\ +\ O(1)\ \=\ O(1)\r\n\ @param\ arr\ -\ array\ of\ coins\ for\ the\ game.\ must\ be\ even\ length.\r\n
comment10.params=drm\ i\ j
comment10.target=int\ prince(int[][],\ int,\ int)
comment10.text=\r\n\ This\ function\ will\ find\ the\ lowest\ steps\ path\ to\ reach\ the\ evil\ cell\ from\ the\ prince\ position\ in\ the\ arr(i,\ j)\r\n\ it\ will\ go\ through\ drm\ and\ check\ every\ path\ possibile\ from\ the\ cell\ of\ the\ prince\ to\ reach\ to\ the\ evil\ cell\r\n\ it\ will\ find\ all\ the\ paths\ by\ check\ all\ possible\ move\ and\ see\ if\ you\ can\ reach\ to\ the\ evil\ cell,\ it\ will\ use\ recursive\ backtracing\ by\ \r\n\ test\ every\ way\ path\ possible\ and\ if\ cannot\ reach\ from\ that\ direction\ will\ try\ another\ direction\r\n\ @param\ drm\ -\ the\ map\ of\ the\ game\ drm(Digital\ Roof\ Map)\r\n\ @param\ i\ -\ the\ i\ index\ of\ the\ prince\ current\ cell\r\n\ @param\ j\ -\ the\ j\ index\ of\ the\ prince\ current\ cell\r\n\ @return\ the\ lowest\ steps\ path\ count\ to\ reach\ the\ evil\ cell\ from\ the\ prince\ position\ in\ the\ arr(i,\ j)\r\n
comment11.params=drm\ i\ j\ iToMove\ jToMove
comment11.target=boolean\ isMovable(int[][],\ int,\ int,\ int,\ int)
comment11.text=\r\n\ This\ function\ will\ check\ if\ the\ move\ the\ prince\ tring\ to\ do\ is\ valid\r\n\ @param\ drm\ -\ the\ map\ of\ the\ game\ drm(Digital\ Roof\ Map)\r\n\ @param\ i\ -\ the\ i\ index\ of\ the\ prince\ current\ cell\r\n\ @param\ j\ -\ the\ j\ index\ of\ the\ prince\ current\ cell\r\n\ @param\ iToMove\ -\ the\ i\ index\ of\ the\ prince\ next\ cell\r\n\ @param\ jToMove\ -\ the\ j\ index\ of\ the\ prince\ next\ cell\r\n\ @return\ if\ the\ move\ the\ prince\ tring\ to\ do\ is\ valid\r\n
comment12.params=eastSum\ southSum\ westSum\ northSum
comment12.target=int\ findMin(int,\ int,\ int,\ int)
comment12.text=\r\n\ This\ function\ will\ find\ the\ min\ step\ count\ path\ from\ all\ the\ given\ sums\ of\ all\ the\ direction\ and\ ignore\ the\ paths\ the\ are\ not\ valid(-1)\r\n\ @param\ eastSum\ -\ the\ step\ count\ of\ the\ path\ from\ the\ east\ direction\r\n\ @param\ southSum\ -\ the\ step\ count\ of\ the\ path\ from\ the\ south\ direction\ \r\n\ @param\ westSum\ -\ the\ step\ count\ of\ the\ path\ from\ the\ west\ direction\r\n\ @param\ northSum\ -\ the\ step\ count\ of\ the\ path\ from\ the\ north\ direction\r\n\ @return\ the\ min\ step\ count\ path\ from\ all\ the\ given\ sums\ of\ all\ the\ direction\ and\ ignore\ the\ paths\ the\ are\ not\ valid(-1)\r\n
comment2.params=arr\ evenSum\ oddSum\ i
comment2.target=int\ isOddBigger(int[],\ int,\ int,\ int)
comment2.text=\r\n\ Calculate\ the\ sum\ of\ coins\ in\ the\ even\ indexes\ and\ odd\ indexes\ to\ know\ which\ indexes\ should\ amir\ pick\ to\ win\r\n\ work\ recursivley\ to\ find\ the\ sums,\ go\ through\ the\ array\ one\ time\r\n\ Time\ complexity\ \=\ 2*n\ +\ 1\ \=\ O(n)\r\n\ Space\ complexity\ \=\ O(1)\ -\ final,\ no\ allocation\ using\ variables;\r\n\ @param\ arr\ -\ array\ of\ coins\ for\ the\ game.\ must\ be\ even\ length.\r\n\ @param\ evenSum\ -\ the\ current\ sum\ of\ even\ indexes,\ carry\ through\ all\ recursive\ calls\ when\ running\ on\ the\ array\ \r\n\ @param\ oddSum\ -\ the\ current\ sum\ of\ odd\ indexes,\ carry\ through\ all\ recursive\ calls\ when\ running\ on\ the\ array\r\n\ @param\ i\ -\ the\ current\ index\ of\ the\ array\ for\ checking\ the\ value\ in\ that\ array\ index\r\n\ @return\ 1\ if\ odd\ is\ bigger\ and\ 0\ if\ if\ even\ is\ bigger\ or\ equal\r\n
comment3.params=arr\ isOddBigger\ low\ high\ amirSum\ tamarSum
comment3.target=void\ printPath(int[],\ int,\ int,\ int,\ int,\ int)
comment3.text=\r\n\ This\ function\ will\ fo\ through\ the\ arr\ of\ coins\ once\ and\ calculate\ the\ move\ of\ amir\ and\ tamar\ according\ to\ tamar\ logic\ and\ amir\ logic,\ \r\n\ pick\ the\ values\ in\ the\ index\ where\ the\ sum\ of\ that\ indexes\ is\ bigger(even\ or\ odd\ indexes)\r\n\ according\ to\ the\ flag\ isOddBigger\ that\ determinate\ which\ indexes\ to\ choose\ and\ finally\ print\ their\ paths\ int\ the\ game\ and\ the\ final\ score\r\n\ Time\ comlexity\ \=\ 8*n\ +\ O(printMove)\ +\ 3\ \=\ 10n\ +\ 3\ \=\ O(n)\r\n\ Space\ complexity\ \=\ O(1)\ -\ final,\ no\ allocation\ using\ variables;\r\n\ @param\ arr\ -\ array\ of\ coins\ for\ the\ game.\ must\ be\ even\ length.\r\n\ @param\ isOddBigger\ -\ the\ flag\ that\ determinate\ which\ indexes\ amir\ should\ take\ to\ win\r\n\ @param\ low\ -\ the\ current\ lowest\ index\ in\ the\ game\r\n\ @param\ high\ -\ the\ current\ highest\ index\ in\ the\ game\r\n\ @param\ amirSum\ -\ the\ current\ sum\ for\ amir\ in\ the\ game\r\n\ @param\ tamarSum\ -\ the\ current\ sum\ for\ tamar\ in\ the\ game\r\n
comment4.params=arr\ player\ i
comment4.target=void\ printMove(int[],\ java.lang.String,\ int)
comment4.text=\r\n\ This\ function\ will\ print\ which\ player\ took\ what\ value\ according\ to\ what\ she\ get\r\n\ Time\ complexity\ -\ O(1)\r\n\ Space\ complexity\ -\ O(1)\ -\ final,\ no\ allocation\ using\ variables;\r\n\ @param\ arr\ -\ array\ of\ coins\ for\ the\ game.\ must\ be\ even\ length.\r\n\ @param\ player\ -\ the\ name\ of\ the\ player\r\n\ @param\ i\ -\ the\ index\ of\ the\ value\ that\ the\ player\ took\r\n
comment5.params=arr
comment5.target=int\ findTriplet(int[])
comment5.text=\r\n\ This\ function\ will\ find\ and\ print\ the\ triple\ values\ that\ represent\ the\ highest\ product\r\n\ this\ function\ will\ go\ over\ and\ find\ the\ three\ max\ values\ and\ the\ two\ lowest\ values\ in\ the\ array\r\n\ because\ the\ highest\ product\ \=\ product\ of\ the\ three\ max\ values\ or\ the\ product\ of\ the\ two\ lowest\ and\ the\ highest\ valueas\r\n\ Time\ complexity\ \=\ O(findMaxWithout)*3\ +\ O(findMinWithout)*2\ +\ 10n\ \=\ O(n)*5\ +\ 10n\ \=\ O(n)\ \r\n\ Space\ complexity\ \=\ O(findMaxWithout)*5\ +\ O(findTriplet\ without\ findmaxWithout)\ \=\ \ \=\ O(1)\ -\ final,\ no\ allocation\ using\ variables\r\n\ @param\ arr\ -\ the\ array\ of\ numbers\ to\ search\ in\r\n\ @return\ the\ product\ of\ the\ triple\ values\ that\ represent\ the\ highest\ product\r\n
comment6.params=arr\ maxIndex\ maxWithoutIndex\ secondMaxWithoutIndex\ i
comment6.target=int\ findMaxWithout(int[],\ int,\ int,\ int,\ int)
comment6.text=\r\n\ This\ function\ will\ find\ the\ max\ value\ in\ the\ array\ and\ if\ specified(maxWithoutIndex\ or/and\ secondMaxWithoutIndex)\ also\ the\ second\ and\ the\ third\ max\r\n\ this\ function\ go\ through\ the\ array\ and\ search\ for\ the\ index\ of\ the\ highest\ value\ according\ to\ the\ indexes\ to\ ignore\ from\ (maxWithoutIndex\ or/and\ secondMaxWithoutIndex)\r\n\ Time\ complexity\ \=\ 4*n\ +\ 1\ \=\ O(n)\r\n\ Space\ Complexity\ \=\ O(1)\ -\ final,\ no\ allocation\ using\ variables\r\n\ @param\ arr\ -\ the\ array\ of\ the\ values\ to\ search\ in\r\n\ @param\ maxIndex\ -\ the\ current\ index\ of\ the\ max\ value\ in\ the\ array\r\n\ @param\ maxWithoutIndex\ -\ the\ index\ of\ the\ max\ value\ to\ ignore\ from\ when\ searching\ the\ second\ or\ third\ max\ values\r\n\ @param\ secondMaxWithoutIndex\ -\ the\ index\ of\ the\ second\ max\ value\ to\ ignore\ from\ when\ searching\ the\ \ third\ max\ values\r\n\ @param\ i\ -\ hte\ current\ index\ to\ search\ on\ int\ the\ array\ \r\n\ @return\ the\ index\ of\ the\ highest\ value\ according\ to\ the\ indexes\ to\ ignore\ from\ (maxWithoutIndex\ or/and\ secondMaxWithoutIndex)\r\n
comment7.params=arr\ minIndex\ minWithoutIndex\ i
comment7.target=int\ findMinWithout(int[],\ int,\ int,\ int)
comment7.text=\r\n\ This\ function\ will\ find\ the\ min\ value\ in\ the\ array\ and\ if\ specified\ minWithoutIndex\ also\ the\ second\ min\r\n\ this\ function\ go\ through\ the\ array\ and\ search\ for\ the\ index\ of\ the\ lowest\ value\ according\ to\ the\ indexes\ to\ ignore\ from\ minWithoutIndex\r\n\ Time\ complexity\ \=\ 4*n\ +\ 1\ \=\ O(n)\r\n\ Space\ Complexity\ \=\ O(1)\ -\ final,\ no\ allocation\ using\ variables\r\n\ @param\ arr\ -\ the\ array\ of\ the\ values\ to\ search\ in\r\n\ @param\ maxIndex\ -\ the\ current\ index\ of\ the\ max\ value\ in\ the\ array\r\n\ @param\ minWithoutIndex\ -\ the\ index\ of\ the\ min\ value\ to\ ignore\ from\ when\ searching\ the\ second\ min\ values\r\n\ @param\ i\ -\ hte\ current\ index\ to\ search\ on\ int\ the\ array\ \r\n\ @return\ the\ index\ of\ the\ lowest\ value\ according\ to\ the\ indexes\ to\ ignore\ from\ minWithoutIndex\r\n
comment8.params=str\ pattern
comment8.target=int\ count(java.lang.String,\ java.lang.String)
comment8.text=\r\n\ This\ function\ will\ find\ the\ number\ of\ occurrences\ of\ the\ pattern\ string,\ not\ have\ to\ be\ continuous\ in\ the\ str\ string\r\n\ @param\ str\ -\ the\ string\ to\ search\ in\ the\ pattern\ string\r\n\ @param\ pattern\ -\ the\ pattern\ to\ search\ for\ in\ the\ str\r\n\ @return\ the\ number\ of\ occurrences\ of\ the\ pattern\ string,\ not\ have\ to\ be\ continuous\ in\ the\ str\ string\r\n
comment9.params=str\ pattern\ strIndex\ patternIndex
comment9.target=int\ recCount(java.lang.String,\ java.lang.String,\ int,\ int)
comment9.text=\r\n\ This\ function\ will\ find\ go\ through\ all\ index\ of\ the\ str\ and\ search\ in\ the\ rest\ of\ the\ str\ if\ the\ other\ chars\ of\ pattern\ string\ shows\r\n\ and\ return\ the\ number\ of\ occurrences\ of\ the\ pattern\ string,\ not\ have\ to\ be\ continuous\ in\ the\ str\ string\r\n\ @param\ str\ -\ the\ string\ to\ search\ in\ the\ pattern\ string\r\n\ @param\ pattern\ -\ the\ pattern\ to\ search\ for\ in\ the\ str\r\n\ @param\ strIndex\ -\ the\ current\ index\ in\ str\ to\ search\ from\r\n\ @paran\ patternIndex\ -\ the\ current\ index\ in\ pattern\ to\ check\ according\ to\r\n\ @return\ the\ number\ of\ occurrences\ of\ the\ pattern\ string,\ not\ have\ to\ be\ continuous\ in\ the\ str\ string\r\n
numComments=13
